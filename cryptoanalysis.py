import string
from matplotlib import pyplot as plt
import numpy as np


def prepare(cipher):
    cipher = cipher.upper()
    cipher = cipher.replace(" ", "").replace(".", "").replace(",", "").replace("?", "").replace("-", "").replace("â€™",
                                                                                                                 "").replace(
        "!", "")
    return cipher


def analysis(cipher, yes="no"):
    zeros = []
    for i in range(26):
        zeros.append(0)
    dict_out = dict(zip(string.ascii_uppercase, zeros))
    for char in cipher:
        dict_out[char] += 1
    if yes == "yes":
        for z in range(26):
            print("{}  =  {}".format(chr(z + 65), dict_out[chr(z + 65)]))
        return "Plaintext length is {}".format(len(cipher))
    if yes == "no":
        return dict_out


def ceaser_shift(cipher, key):
    out = ""
    for i in range(0, len(cipher) - 1):
        out = out + chr(((ord(cipher[i]) + key - 65) % 26) + 65)
    return out


def y_values(cipher):
    dict_out = analysis(cipher)
    dict_values = [(i / len(cipher)) * 100 for i in dict_out.values()]
    return dict_values


def plot_graph(cipher):
    letterFrequency = {1: 8.497, 2: 1.492, 3: 2.202, 4: 4.253, 5: 11.162, 6: 2.228, 7: 2.015, 8: 6.094, 9: 7.546,
                       10: 0.153, 11: 1.292, 12: 4.025, 13: 2.406, 14: 6.749, 15: 7.507, 16: 1.929, 17: 0.095,
                       18: 7.587, 19: 6.327, 20: 9.256, 21: 2.758, 22: 0.978, 23: 2.560, 24: 0.150, 25: 1.994,
                       26: 0.077}
    y_value1 = y_values(cipher)
    plt.title("Cipher analysis of " + cipher[:24] + "...")
    y_value2 = letterFrequency.values()
    plt.bar(index - 0.2, y_value1, width=0.4, label="Cipher analysis")
    plt.bar(index + 0.2, y_value2, width=0.4, label="English letter frequency")
    plt.xticks(index, label)
    plt.legend(loc='best')
    plt.xlabel("Letters of the alphabet")
    plt.ylabel("Percentage frequency")
    plt.ylim(0, 13)
    plt.show()


alphabet = dict(zip(range(1, 27), string.ascii_uppercase))
label = [char for char in alphabet.values()]
index = np.arange(len(label))

ciphertext = "ETRROOPOARNETPONUIGNNREDEIFSOAWRSLMOTFLAEWRVORCEEIUSRGPNLFSPERIMMEOHITSCNSOOITENNIRARRSDPOONEBNNRESMAGESTTTTEUOOOPUJNWITAWISLHOEHLTTWOMAWESTETFMAETSRERVAEDOSLYFARCSCSOONSYURKTINAIGDNHRATPTEMIEYDTAWOTSYVAMWKERHOLTAIPRELDAOHRSDDEECFUOEHRTHMGERIFQHETYUCHNTWEAHETRHCHATMSLBEAITHOFSDLEOGNLIOWEITPAORFHSNEMRNBEAHRTDPSIEAGNTGNNHIRNIEVEAVHTOREEAERMAMNIFDAEUNLAULGRYEDNDATDEMMHOACDORNGUOFTTPLHETRIADEATASCSUATLULODWERPBNOUUVIDTECTDSIAEWITDCEHDTAEATMAHDLSUDOSDNEETCODNWURHDETEERMITOSTHNRNIEVEAOHTFDERIBRREEVODNLACWIHTLBEMINOHLTLESRHAIFEERDNAOHTGCNHIRREEVBIDAWETSIOTDFNOUESSBOIPLFOBTOELSALWIOGRTNEALKDOCOSGAAWRLYINHTIOETLATPNNATNEDETHYCSRAAWRODREUIWOHTTUIEUOTCNNEGNTIARYRANUDGTOLSECHLSSAOABENIGTTNENAHLTPUILSPEPDIADTLEDNAELSPNHCASEDUASDENLTARDEIHIAPDGRNYDETSTUAGOHTATNTRIUHFRECECSAVCASAAILNUBTNELWDENIADNENWCOUREOTINGYLNNTOEERHATCKOJARHENWNAEHSAAPOATSICIRTNORIGOEAWWOMNSRATWNEAIHLTGLNOIORECPAOESETHATPPSPRLECIMADNESHTEITWMUFIDSESHTENEOLRTECOEYCSLIHSMSRAEABPNNSAELTAYDELHOTFSEALHSPTMOOSAMNBCUIUGHENNTSEAHCTNPOETREVAHOTTEHAWTSSINATATCABIRKBTYSROIFCHSEPEOFHLHTUYALWPLTLRIVRTENEERLAPSSIGSNAITAHCOTLAESEELHXTLVIPSEOHEGCRSAEANDOTTDTSEERDYTGONHIETCEERLLSIOSEYUEMQPNIAHTTDENDECAANJSARTOGTCBMEAEHSCERHOTBDEMNTIALIEWLMOLPNSIWUTNTIOPHGETERRUETOSAPAEHMSAIIUODGTNODETWESFXENRFOLTAIRITNMAOEBTIEHWLALTLSDOOOONITOUJWMHPTIIOETLGARCLLMIRWMINEINALIEPCNAHGETRIENDNOEIPGTRNUHFRTSENRICNOUIST"
cipher = "REPORTONOPERATIONGUNNERSIDEFROMSWALLOWAFTERRECOVERINGSUPPLIESFROMTHEMISSIONCONTAINERDROPSRONNENBERGSTEAMSETOUTTOJOINUPWITHSWALLOWTHETWOTEAMSMETAFTERSEVERALDAYSOFCROSSCOUNTRYSKIINGANDTHEPARTYMADEITSWAYTOVEMORKWHILEPATROLSHADREDUCEDFROMTHEHIGHFREQUENCYTHATTHEWEHRMACHTESTABLISHEDFOLLOWINGOPERATIONFRESHMANTHEBRIDGESPANNINGTHERAVINEOVERTHEMANAREMAINEDFULLYGUARDEDANDTHECOMMANDOGROUPFELTTHATADIRECTASSAULTWOULDBEUNPRODUCTIVEITWASDECIDEDTHATATEAMSHOULDDESCENDTWOHUNDREDMETERSINTOTHERAVINEFORDTHERIVERBELOWANDCLIMBTHEHILLONTHEFARSIDEONREACHINGTHERIVERBEDITWASFOUNDTOBEPOSSIBLETOFOLLOWASINGLETRACKGOODSRAILWAYINTOTHEPLANTANDTHEENTRYWASCARRIEDOUTWITHOUTENCOUNTERINGANYGUARDSTHELOCALBOSSAGENTINTHEPLANTSUPPLIEDDETAILEDPLANSANDSCHEDULESANDTHERAIDINGPARTYUSEDTHATTOGAINFURTHERACCESSVIAACABLETUNNELANDWINDOWENCOUNTERINGONLYTHECARETAKERJOHANSENWHOASAPATRIOTICNORWEGIANWASMORETHANWILLINGTOCOOPERATETHESAPPERSPLACEDMINESWITHTIMEDFUSESONTHEELECTROLYSISCHAMBERSASPLANNEDTHEYALSOLEFTATHOMPSONSUBMACHINEGUNATTHESCENETOPROVETHATTHISWASANATTACKBYBRITISHFORCESHOPEFULLYTHATWILLPREVENTREPRISALSAGAINSTTHELOCALSTHEEXPLOSIVECHARGESDETONATEDDESTROYINGTHEELECTROLYSISEQUIPMENTANDTHEADJACENTSTORAGECHAMBERSTHECOMBINEDTEAMWILLNOWSPLITUPINTOTHREEGROUPSTEAMAISHEADINGOUTTOSWEDENFOREXFILTRATIONTEAMBWILLHEADTOOSLOTOJOINUPWITHMILORGTEAMCWILLREMAININPLACEINTHEREGIONPENDINGFURTHERINSTRUCTIONS"
different = prepare("SONCM SPAWY OCPRP ZHWAH DPDDZ BAWWJ PGEYC OWCWY REYHA CQAAH AOUAC AWYAE WWPLF UACHT QACSL ZFPDH KEVAD GDPOZ BIWCH ACGPS SUPGP LPHTG DPRPS OPEVA RIJYS NDWZP CLPFW EWKYK WDSBQ SYEWR PWJHW LTBCZ IPEVA PLEDH EYUOE CYVGK QVALJ UHOPP FXFHP SOPEV AYOVT SJRWJ PSNDK ACSWM ZAECN PGPLF PAFKO IYEWK YHDTG SLGYZ BBTFI PREYQ KXAQY WYLHE ZBODA QRUHP RKFHK QHDPD HLBPM MFZAW CPNFB WYRAT BJLFO VWJYS NWOJO HDPQD TSBPB CTBAP FWYRZ PGERB ACCBE VAAZW YHSSC WCSOE WHWKK CYEYU PSSNP OODCA LUAYH OEVAT BBZFI LHEZB SLGOP BPECE YHAWZ ERSJN SDPOZ BIWCH ACGEY ZKYRK YWJEC KEVLL GPPHQ MSOFG EYUWN WLSSN OSRPZ KASZQ CNMCO DPUWS KXONV GPSWO TBPPZ HTUAY QAHOO AOODS ZECQD OWQKD ZGPLF PPRPZ RAGSH ZDWAZ WYHKM CIMHD PDHLB PCIJY WJRHD PFEDY KQGER BEQWY LBPNW RTZEL BHZGO PGHFQ GTZUZ BAZTK FFXZG OZTBT QELZO DDKEH AOHDP AWACJ EVAHO HWCBL PNTSB TBCCC KXRQC WJROL CCPZQ KWJED WPLBZ CSWWW OPRSS OPTHS LGDPT HLUCP RPSSK ASNLH EZBWY RCZHI PWJGC HGSZT KWDOX WSPZQ KYHWN HOHOH WCSGW WEVAZ GHZPN LBYSC BXWHZ FCLBZ HSDLJ AMSAY KKCYE YUPZU AEVAC KEEVQ DOWQH KCSBT BAEVA XWODW KYRAD DEESP SSNTG GDHDP MWRFA PRPZO ZLMHT UDEFW TREYH DPVKA SPSOP EVALR ZPRWN QQCOY JKKFZ ZCSZF QAYCN HSCTO JNOOF OHEWA DIJQC NEIJL HAWMP SSNLW ZHOOL AEISZ DIYNS ODOOJ CQNOJ DSAQF KXHDP OPEOY SSZCS LZFPT HEDRK FPHPS JNFUA HAOOC LWJMI PHOOL ZKEHK FUDPF PZQNL QGEVA JVWGS QDSZL BWQTE YSOSW BETKC HDPGQ MGPTH QEWKY DDLGA MSBZF AFGEY UPSSO LAADC NECBE FWYGL ZGEEW KYHWV SWWCK VOJOZ AEAAV BKHKD LHUZI PSWJV AALBS SWHPW STZHE FUECY ZBPLQ PCCJY SJMSN RHKDS AHVWE VAHOJ EGPZR KYSTE UEGSJ EVAYS AOHKA FKESY ECQCB AEKKC YEHWH WWJNF ALGAE VAVSU WSJRH DQCNX MIPGO LUAEC UZIJP LPHSA VHKLH HPOOE GEI")
# print(ceaser_shift(cipher, 0)) --> add a ceaser shift if required


#plot_graph(cipher)
#plot_graph(different)