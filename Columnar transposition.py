from substitution_tim import prepare, cost, accept_prob
import random

def create_key(key_length):
    key = []
    for i in range(key_length):
        key.append(i + 1)
    return key

def add_X(cipher, key):
    for z in range(len(key) - int(len(cipher) % len(key))):
        cipher = cipher + "X"
    return cipher

def swap_columnar(key):
    n1, n2 = random.sample(range(0, len(key)), 2)
    key1 = key[n1]
    key2 = key[n2]
    key[n1] = key2
    key[n2] = key1
    return key

def solve(ciphertext, key):
    solve_list = []
    output = ""

    #splitting the ciphertext into blocks of length key
    for y in range(int(len(ciphertext) / len(key))):
        solve_list.append(ciphertext[len(key)*y: len(key)*(y+1)])

    for section in solve_list:  #iterates through the different sections split by the length of the key
        for x in key:           #iterates through the column patterns of the key
            output = output + section[x - 1]
    return output

def SA_mine(cipher, key):       #where f is the input function and a and b are the bounds between which a solution is looked for
    focus = 0.99
    t = 1
    t_min = 0.0001
    best = solve(cipher, key)
    best_key = key
    current = cost(best)
    while t > t_min:
        i = 1
        while i <= 10:          #iterations at each temperature
            next_key = swap_columnar(key)
            new = cost(solve(cipher, next_key))
            if new >= current:
                best_key = next_key
                current = new
                if new >= cost(best):
                    best = solve(cipher, best_key)
            if accept_prob(t, current, new) > random.random():
                best_key = next_key
                current = new
            i += 1
        t = focus * t
    return best


real_key = [2, 4, 1, 5, 8, 3, 7, 9, 6]
key = create_key(7)
#ciphertext = prepare("ETMHBNBOIAGORIENDVRMAOKASWCIROREDUDTIUDRNLAGYHINGTVNOOBESMETIRXNETETAHHEATSTCAQKUODORNINCSISOTNHFGTTINREAPELSNLESIIPTONOTTOGWRSUCPEAHAMNKWIGUOTRONHSNAETTERWGTCHSIPHAAPDREEBTHOEOETNKRDSHPRYOEOTWRIASTAOTNNNHDERIETAAPTLTNETHIERMSLTETEHOETAESTTAHTKASCWTNAORFEOENESNWOIRANTSIRTPECDTEEABCYIEORVNRLADFLAOETTHAKATCGIRNAACIRSFMTEHTEOEATVRNUERFEMDRETOHSMOISYNIEIEEWTESNSTSESAATTHNTRITTMEINTLETDOCUVCAOEEPRPEAORDSDTIPRHUTTETACTUAKHTBTAERMJYIOTTOEFHLXEPIOSSVOAERDUINTYRHTNTEOSDRWEPRDOPTWEIEHHVRHIYGCAACUOCRYHNITEATNRPTNELNTAOTLTYWHOOTERNETISOHHTOTERWPEASOTTNNIAHDETEFIRNCOSREUTDRUCWTRHIETOSTTOWHDESOFRTETOHSALSAHTUTOESBMIFBADLDETAAOMTGREHUEEBTIULDRTEEMIEUERCLTYOSLSCFIAIIALTONYDNUSRECTWOOKESFYAHVTWWAEEERROPCRTDTEETBSYHEEEVTNESOOYRSEFFRICONRCECDOTRNEBEEAOWHVOEEHVROETPRWAEPINLTETHSLBAFSNEMEDEAAGNDHADSITSOERCNDADITOPNHNLEAATERIHSSTOEIPSLBSIYIATTUTHONRIEEHEMSEAEVASNGTRWNOKIGIWITTHNDIINCISSUNISOTWFIHCFOILIRASDOFMAIHELIECMESRTNPOGUHIBTANESECDEEIHDDTTAFTHIAECTLHIYLOSUEDUBSOTHDEWSNXNTIITGKSOFSCOAHWEVEAYTNROADSTPAUSYIMODHRDXIIEBLWLHEPSITEPDHORTEBLIAAORRTSIOEDANNMAUAFUCNTRAGIFLCIIIIETSENAGRFNMYFOTRURHREREHNINMCENTXADRPEEEIAMNOTTIINNGVETEHSRFIKCLOOEAILSAOPNWGIEENLWLDESETNIOGIINFCYTALHECNAEENSRCYUIRFTOITPHSAEOROTIINLNFAWLHYELOSUODTNTTHEAETTHAKATCLKDILETEWYNETORNNOGWNEIVCAIIISLAITNHSSLIVBUAAPLPERAAOGANDDARONUEASGNEATRIDTONIHGEERHBSEETRDALNIDONNTONNORSEUHETTANHTEWOIREPAGNUOTPLNIAODUSNENTRAWDISHOSOTABFLMTOERSHEEELENDSEASDSTEH")     #adds X's to the end of the ciphertext so all the columns are filled
ciphertext = prepare("ETRROOPOARNETPONUIGNNREDEIFSOAWRSLMOTFLAEWRVORCEEIUSRGPNLFSPERIMMEOHITSCNSOOITENNIRARRSDPOONEBNNRESMAGESTTTTEUOOOPUJNWITAWISLHOEHLTTWOMAWESTETFMAETSRERVAEDOSLYFARCSCSOONSYURKTINAIGDNHRATPTEMIEYDTAWOTSYVAMWKERHOLTAIPRELDAOHRSDDEECFUOEHRTHMGERIFQHETYUCHNTWEAHETRHCHATMSLBEAITHOFSDLEOGNLIOWEITPAORFHSNEMRNBEAHRTDPSIEAGNTGNNHIRNIEVEAVHTOREEAERMAMNIFDAEUNLAULGRYEDNDATDEMMHOACDORNGUOFTTPLHETRIADEATASCSUATLULODWERPBNOUUVIDTECTDSIAEWITDCEHDTAEATMAHDLSUDOSDNEETCODNWURHDETEERMITOSTHNRNIEVEAOHTFDERIBRREEVODNLACWIHTLBEMINOHLTLESRHAIFEERDNAOHTGCNHIRREEVBIDAWETSIOTDFNOUESSBOIPLFOBTOELSALWIOGRTNEALKDOCOSGAAWRLYINHTIOETLATPNNATNEDETHYCSRAAWRODREUIWOHTTUIEUOTCNNEGNTIARYRANUDGTOLSECHLSSAOABENIGTTNENAHLTPUILSPEPDIADTLEDNAELSPNHCASEDUASDENLTARDEIHIAPDGRNYDETSTUAGOHTATNTRIUHFRECECSAVCASAAILNUBTNELWDENIADNENWCOUREOTINGYLNNTOEERHATCKOJARHENWNAEHSAAPOATSICIRTNORIGOEAWWOMNSRATWNEAIHLTGLNOIORECPAOESETHATPPSPRLECIMADNESHTEITWMUFIDSESHTENEOLRTECOEYCSLIHSMSRAEABPNNSAELTAYDELHOTFSEALHSPTMOOSAMNBCUIUGHENNTSEAHCTNPOETREVAHOTTEHAWTSSINATATCABIRKBTYSROIFCHSEPEOFHLHTUYALWPLTLRIVRTENEERLAPSSIGSNAITAHCOTLAESEELHXTLVIPSEOHEGCRSAEANDOTTDTSEERDYTGONHIETCEERLLSIOSEYUEMQPNIAHTTDENDECAANJSARTOGTCBMEAEHSCERHOTBDEMNTIALIEWLMOLPNSIWUTNTIOPHGETERRUETOSAPAEHMSAIIUODGTNODETWESFXENRFOLTAIRITNMAOEBTIEHWLALTLSDOOOONITOUJWMHPTIIOETLGARCLLMIRWMINEINALIEPCNAHGETRIENDNOEIPGTRNUHFRTSENRICNOUIST")     #adds X's to the end of the ciphertext so all the columns are filled

#print(solve(ciphertext, real_key))
#print(real_key)

print(key)
print(ciphertext)
print(SA_mine(ciphertext, key))